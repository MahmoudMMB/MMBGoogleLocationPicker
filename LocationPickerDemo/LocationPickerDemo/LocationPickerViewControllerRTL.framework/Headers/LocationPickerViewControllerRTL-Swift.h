#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import MapKit;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LocationPickerViewControllerRTL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC31LocationPickerViewControllerRTL12LocationCell")
@interface LocationCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>MKMapItem</code> encapsulation class to save you from importing <code>MapKit</code> everywhere in you project and provide some convenience.
/// important:
///
/// This class is a encapsulation of <code>MKMapItem</code>, you can access the <code>MKMapItem</code> object via <code>mapItem</code> property.
/// note:
///
/// <code>LocationItem</code> provides some get-only computed property to access properties of <code>MKMapItem</code> object more easily.
/// \code
///  var name: String
///  var coordinate: (latitude: Double, longitude: Double)
///  var addressDictionary: [NSObject: AnyObject]?
///  var formattedAddressString: String?
///
/// \endcodeThis class provides two initialization methods, you can either provide a <code>MKMapItem</code> object or provide a coordinate and an address dictionary to initialize.
/// This class is hashable, the hash value of this class is the hash value of the combined string of latitude and longitude.
/// This class is equalable, objects have the same latitude and longitude are equal.
/// Objects of this class can be encoded and decoded.
/// \code
///    let locationData = NSKeyedArchiver.archivedDataWithRootObject(locationItem)
///    let locationItem = NSKeyedUnarchiver.unarchiveObjectWithData(locationData) as! LocationItem
///
/// \endcode
SWIFT_CLASS("_TtC31LocationPickerViewControllerRTL12LocationItem")
@interface LocationItem : NSObject <NSCoding>
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIGestureRecognizer;
@class NSBundle;

SWIFT_CLASS("_TtC31LocationPickerViewControllerRTL14LocationPicker")
@interface LocationPicker : UIViewController <UIGestureRecognizerDelegate>
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end

@class MKMapView;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <MKMapViewDelegate>
- (void)mapView:(MKMapView * _Nonnull)mapView regionWillChangeAnimated:(BOOL)animated;
- (void)mapView:(MKMapView * _Nonnull)mapView regionDidChangeAnimated:(BOOL)animated;
@end

@class UISearchBar;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <UISearchBarDelegate>
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL))
/// This method would be called everytime user select a location including the change of region of the map view.
/// important:
///
/// This method includes the following codes:
/// selectCompletion?(locationItem)
/// delegate?.locationDidSelect?(locationItem)
/// So, if you override it without calling <code>super.locationDidSelect(locationItem)</code>, completion closure and delegate method would not be called.
/// note:
///
/// This method would be called multiple times, because user may change selection before final decision.
/// To do something with user’s final decition, use <code>func locationDidPick(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var selectCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Delegate
///   </li>
/// </ul>
/// <ol>
///   <li>
///     conform to <code>protocol LocationPickerDelegate</code>
///   </li>
///   <li>
///     set the <code>var delegate</code>
///   </li>
///   <li>
///     implement <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var selectCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidPick(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item user selected
///
- (void)locationDidSelectWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This method would be called after user finally pick a location.
/// important:
///
/// This method includes the following codes:
/// pickCompletion?(locationItem)
/// delegate?.locationDidPick?(locationItem)
/// So, if you override it without calling <code>super.locationDidPick(locationItem)</code>, completion closure and delegate method would not be called.
/// note:
///
/// This method would be called only once in <code>func viewWillDisappear(animated: Bool)</code> before this instance of <code>LocationPicker</code> dismissed.
/// To get user’s every selection, use <code>func locationDidSelect(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var pickCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Delegate
///   </li>
/// </ul>
/// <ol>
///   <li>
///     conform to <code>protocol LocationPickerDelegate</code>
///   </li>
///   <li>
///     set the <code>var delegate</code>
///   </li>
///   <li>
///     implement <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var pickCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidSelect(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item user picked
///
- (void)locationDidPickWithLocationItem:(LocationItem * _Nonnull)locationItem;
@end

@class UITableView;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_PROTOCOL("_TtP31LocationPickerViewControllerRTL24LocationPickerDataSource_")
@protocol LocationPickerDataSource
/// Tell the <code>tableView</code> of <code>LocationPicker</code> how many locations you want to add to the location list.
///
/// returns:
/// The number of locations you would like to display in the list
- (NSInteger)numberOfAlternativeLocations SWIFT_WARN_UNUSED_RESULT;
/// Provide the location item to the location list.
/// \param index The index of the location item
///
///
/// returns:
/// The location item in the specific index
- (LocationItem * _Nonnull)alternativeLocationAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@optional
/// This delegate method would be called after user delete an alternative location.
/// note:
///
/// This method would be called when user delete a location cell from <code>tableView</code>.
/// User can only delete the location provided in <code>var alternativeLocations</code> or <code>dataSource</code> method <code>alternativeLocationAtIndex(index: Int) -> LocationItem</code>.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var deleteCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func alternativeLocationDidDelete(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var deleteCompletion: ((LocationItem) -> Void)?</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item needs to be deleted
///
- (void)commitAlternativeLocationDeletionWithLocationItem:(LocationItem * _Nonnull)locationItem;
@end


/// All methods of this protocol are optional, they allow the delegate to perform actions.
SWIFT_PROTOCOL("_TtP31LocationPickerViewControllerRTL22LocationPickerDelegate_")
@protocol LocationPickerDelegate
@optional
/// This delegate method would be called everytime user select a location including the change of region of the map view.
/// note:
///
/// This method would be called multiple times, because user may change selection before final decision.
/// To do something with user’s final decition, use <code>func locationDidPick(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var selectCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Overrride
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidSelect(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var selectCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidPick(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDataSource</code>
/// \param locationItem The location item user selected
///
- (void)locationDidSelectWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This delegate method would be called after user finally pick a location.
/// note:
///
/// This method would be called only once in <code>func viewWillDisappear(animated: Bool)</code> before this instance of <code>LocationPicker</code> dismissed.
/// To get user’s every selection, use <code>func locationDidSelect(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var pickCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var pickCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidSelect(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDataSource</code>
/// \param locationItem The location item user picked
///
- (void)locationDidPickWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This delegate method would be called when user try to fetch current location without granting location access.
/// note:
///
/// If you wish to present an alert view controller, just ignore this method. You can provide a fully cutomized <code>UIAlertController</code> to <code>var locationDeniedAlertController</code>, or configure the alert view controller provided by <code>LocationPicker</code> using <code>func setLocationDeniedAlertControllerTitle</code>.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var locationDeniedHandler</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidDeny(locationPicker: LocationPicker)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var locationDeniedHandler: ((LocationPicker) -> Void)?</code>
/// <code>protocol LocationPickerDataSource</code>
/// <code>var locationDeniedAlertController</code>
/// <code>func setLocationDeniedAlertControllerTitle</code>
/// \param locationPicker <code>LocationPicker</code> instance that needs to response to user’s location request
///
- (void)locationDidDenyWithLocationPicker:(LocationPicker * _Nonnull)locationPicker;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import MapKit;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LocationPickerViewControllerRTL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC31LocationPickerViewControllerRTL12LocationCell")
@interface LocationCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A <code>MKMapItem</code> encapsulation class to save you from importing <code>MapKit</code> everywhere in you project and provide some convenience.
/// important:
///
/// This class is a encapsulation of <code>MKMapItem</code>, you can access the <code>MKMapItem</code> object via <code>mapItem</code> property.
/// note:
///
/// <code>LocationItem</code> provides some get-only computed property to access properties of <code>MKMapItem</code> object more easily.
/// \code
///  var name: String
///  var coordinate: (latitude: Double, longitude: Double)
///  var addressDictionary: [NSObject: AnyObject]?
///  var formattedAddressString: String?
///
/// \endcodeThis class provides two initialization methods, you can either provide a <code>MKMapItem</code> object or provide a coordinate and an address dictionary to initialize.
/// This class is hashable, the hash value of this class is the hash value of the combined string of latitude and longitude.
/// This class is equalable, objects have the same latitude and longitude are equal.
/// Objects of this class can be encoded and decoded.
/// \code
///    let locationData = NSKeyedArchiver.archivedDataWithRootObject(locationItem)
///    let locationItem = NSKeyedUnarchiver.unarchiveObjectWithData(locationData) as! LocationItem
///
/// \endcode
SWIFT_CLASS("_TtC31LocationPickerViewControllerRTL12LocationItem")
@interface LocationItem : NSObject <NSCoding>
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIGestureRecognizer;
@class NSBundle;

SWIFT_CLASS("_TtC31LocationPickerViewControllerRTL14LocationPicker")
@interface LocationPicker : UIViewController <UIGestureRecognizerDelegate>
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end

@class MKMapView;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <MKMapViewDelegate>
- (void)mapView:(MKMapView * _Nonnull)mapView regionWillChangeAnimated:(BOOL)animated;
- (void)mapView:(MKMapView * _Nonnull)mapView regionDidChangeAnimated:(BOOL)animated;
@end

@class UISearchBar;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <UISearchBarDelegate>
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@end


@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL))
/// This method would be called everytime user select a location including the change of region of the map view.
/// important:
///
/// This method includes the following codes:
/// selectCompletion?(locationItem)
/// delegate?.locationDidSelect?(locationItem)
/// So, if you override it without calling <code>super.locationDidSelect(locationItem)</code>, completion closure and delegate method would not be called.
/// note:
///
/// This method would be called multiple times, because user may change selection before final decision.
/// To do something with user’s final decition, use <code>func locationDidPick(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var selectCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Delegate
///   </li>
/// </ul>
/// <ol>
///   <li>
///     conform to <code>protocol LocationPickerDelegate</code>
///   </li>
///   <li>
///     set the <code>var delegate</code>
///   </li>
///   <li>
///     implement <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var selectCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidPick(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item user selected
///
- (void)locationDidSelectWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This method would be called after user finally pick a location.
/// important:
///
/// This method includes the following codes:
/// pickCompletion?(locationItem)
/// delegate?.locationDidPick?(locationItem)
/// So, if you override it without calling <code>super.locationDidPick(locationItem)</code>, completion closure and delegate method would not be called.
/// note:
///
/// This method would be called only once in <code>func viewWillDisappear(animated: Bool)</code> before this instance of <code>LocationPicker</code> dismissed.
/// To get user’s every selection, use <code>func locationDidSelect(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var pickCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Delegate
///   </li>
/// </ul>
/// <ol>
///   <li>
///     conform to <code>protocol LocationPickerDelegate</code>
///   </li>
///   <li>
///     set the <code>var delegate</code>
///   </li>
///   <li>
///     implement <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var pickCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidSelect(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item user picked
///
- (void)locationDidPickWithLocationItem:(LocationItem * _Nonnull)locationItem;
@end

@class UITableView;

@interface LocationPicker (SWIFT_EXTENSION(LocationPickerViewControllerRTL)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_PROTOCOL("_TtP31LocationPickerViewControllerRTL24LocationPickerDataSource_")
@protocol LocationPickerDataSource
/// Tell the <code>tableView</code> of <code>LocationPicker</code> how many locations you want to add to the location list.
///
/// returns:
/// The number of locations you would like to display in the list
- (NSInteger)numberOfAlternativeLocations SWIFT_WARN_UNUSED_RESULT;
/// Provide the location item to the location list.
/// \param index The index of the location item
///
///
/// returns:
/// The location item in the specific index
- (LocationItem * _Nonnull)alternativeLocationAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@optional
/// This delegate method would be called after user delete an alternative location.
/// note:
///
/// This method would be called when user delete a location cell from <code>tableView</code>.
/// User can only delete the location provided in <code>var alternativeLocations</code> or <code>dataSource</code> method <code>alternativeLocationAtIndex(index: Int) -> LocationItem</code>.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var deleteCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func alternativeLocationDidDelete(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var deleteCompletion: ((LocationItem) -> Void)?</code>
/// <code>protocol LocationPickerDelegate</code>
/// \param locationItem The location item needs to be deleted
///
- (void)commitAlternativeLocationDeletionWithLocationItem:(LocationItem * _Nonnull)locationItem;
@end


/// All methods of this protocol are optional, they allow the delegate to perform actions.
SWIFT_PROTOCOL("_TtP31LocationPickerViewControllerRTL22LocationPickerDelegate_")
@protocol LocationPickerDelegate
@optional
/// This delegate method would be called everytime user select a location including the change of region of the map view.
/// note:
///
/// This method would be called multiple times, because user may change selection before final decision.
/// To do something with user’s final decition, use <code>func locationDidPick(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var selectCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Overrride
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidSelect(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var selectCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidPick(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDataSource</code>
/// \param locationItem The location item user selected
///
- (void)locationDidSelectWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This delegate method would be called after user finally pick a location.
/// note:
///
/// This method would be called only once in <code>func viewWillDisappear(animated: Bool)</code> before this instance of <code>LocationPicker</code> dismissed.
/// To get user’s every selection, use <code>func locationDidSelect(locationItem: LocationItem)</code> instead.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var pickCompletion</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidPick(locationItem: LocationItem)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var pickCompletion: ((LocationItem) -> Void)?</code>
/// <code>func locationDidSelect(locationItem: LocationItem)</code>
/// <code>protocol LocationPickerDataSource</code>
/// \param locationItem The location item user picked
///
- (void)locationDidPickWithLocationItem:(LocationItem * _Nonnull)locationItem;
/// This delegate method would be called when user try to fetch current location without granting location access.
/// note:
///
/// If you wish to present an alert view controller, just ignore this method. You can provide a fully cutomized <code>UIAlertController</code> to <code>var locationDeniedAlertController</code>, or configure the alert view controller provided by <code>LocationPicker</code> using <code>func setLocationDeniedAlertControllerTitle</code>.
/// Alternatively, the same result can be achieved by:
/// <ul>
///   <li>
///     Closure
///   </li>
/// </ul>
/// <ol>
///   <li>
///     set <code>var locationDeniedHandler</code>
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Override
///   </li>
/// </ul>
/// <ol>
///   <li>
///     create a subclass of <code>class LocationPicker</code>
///   </li>
///   <li>
///     override <code>func locationDidDeny(locationPicker: LocationPicker)</code>
///   </li>
/// </ol>
/// seealso:
///
/// <code>var locationDeniedHandler: ((LocationPicker) -> Void)?</code>
/// <code>protocol LocationPickerDataSource</code>
/// <code>var locationDeniedAlertController</code>
/// <code>func setLocationDeniedAlertControllerTitle</code>
/// \param locationPicker <code>LocationPicker</code> instance that needs to response to user’s location request
///
- (void)locationDidDenyWithLocationPicker:(LocationPicker * _Nonnull)locationPicker;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
